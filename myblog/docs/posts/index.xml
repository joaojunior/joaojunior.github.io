<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Joao Junior</title>
    <link>https://joaojunior.org/posts/</link>
    <description>Recent content in Posts on Joao Junior</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>blog@joaojunior.org (Joao Junior)</managingEditor>
    <webMaster>blog@joaojunior.org (Joao Junior)</webMaster>
    <lastBuildDate>Wed, 17 Jul 2024 12:40:06 -0400</lastBuildDate>
    <atom:link href="https://joaojunior.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Is CPython Faster Without the Global Interpreter Lock(GIL)?</title>
      <link>https://joaojunior.org/posts/is-cpython-faster-without-the-global-interpreter-lock-gil/</link>
      <pubDate>Wed, 17 Jul 2024 12:40:06 -0400</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/is-cpython-faster-without-the-global-interpreter-lock-gil/</guid>
      <description>The Global interpreter lock(GIL) is a mechanism in CPython implementation to ensure only one thread is running at a time. This means that even if we use threads to try to speed up our programs&amp;rsquo; runtime, this will not work because, in the end, the interpreter will block that two or more threads will be executed in parallel.&#xA;As the name suggests, the GIL is a locker that a thread gets when it starts and releases at some moment.</description>
    </item>
    <item>
      <title>Lua Scripts Are Not Atomic in Redis</title>
      <link>https://joaojunior.org/posts/lua-scripts-are-not-atomic-in-redis/</link>
      <pubDate>Mon, 08 Apr 2024 14:15:00 +0000</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/lua-scripts-are-not-atomic-in-redis/</guid>
      <description>Redis is an in-memory data structure store, very powerful, with an excellent abstraction via its API to manipulate its data structure. What makes Redis very powerful, in my opinion, is the variety of data structures it provides and the performance of its operations. This last feature is an effect of being an in-memory store.&#xA;As with every software, Redis also has technical decisions and limitations that we need to be aware of and consider when choosing it.</description>
    </item>
    <item>
      <title>Improving the check if an object is in a Set/HashMap data structure in Ruby by using better comparisons, memoization, and object orientation practices</title>
      <link>https://joaojunior.org/posts/improving-the-check-if-an-object-is-in-a-set-hashmap-data-structure-in-ruby-by-using-better-comparisons-memoization-and-object-orientation-practices/</link>
      <pubDate>Mon, 13 Mar 2023 14:04:03 -0400</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/improving-the-check-if-an-object-is-in-a-set-hashmap-data-structure-in-ruby-by-using-better-comparisons-memoization-and-object-orientation-practices/</guid>
      <description>I was verifying the performance of an endpoint in an API using framegraph when I noticed that checking if an object is in a set or a hash data structure was consuming a lot of time. This post explains the problem and the solution to it.&#xA;First of all, checking if an object is in a Set or HashMap is O(1) when we don&amp;rsquo;t consider collisions. Even in the presence of collisions, it should be much less than O(n), where n is the number of items in the set.</description>
    </item>
    <item>
      <title>Peopleware: Productive Projects and Teams</title>
      <link>https://joaojunior.org/posts/peopleware-productive-projects-and-teams/</link>
      <pubDate>Mon, 07 Nov 2022 22:51:26 -0500</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/peopleware-productive-projects-and-teams/</guid>
      <description>First things first, this is a classic book by Tom DeMarco and Timothy Lister that everyone working in the software industry must read.&#xA;The third edition divides this book into 6 parts with 39 chapters and 249 pages. It is an easy book to read and follow. However, it is necessary to stop constantly to reflect on the facts and ideas presented. Also, the reading would be like a map of the industry if you had a lot of experience in the software development industry.</description>
    </item>
    <item>
      <title>Why Is Atomicity Not Enough?</title>
      <link>https://joaojunior.org/posts/why-is-atomicity-not-enough/</link>
      <pubDate>Wed, 11 May 2022 10:29:19 -0400</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/why-is-atomicity-not-enough/</guid>
      <description>When we study transactions in relational databases, one of the first things we learn are the guarantees that a transaction must provide. ACID(Atomicity, Consistency, Isolation, Durability) are the properties that we desire. Here, I will discuss the Isolation level in more detail and show that atomicity alone is not enough when handling concurrency.&#xA;One classic example of the importance of atomicity is moving money between accounts. So, imagine that we have two accounts and we would like to transfer the total amount from one account to another one.</description>
    </item>
    <item>
      <title>Quicksort</title>
      <link>https://joaojunior.org/posts/quicksort/</link>
      <pubDate>Thu, 22 Jul 2021 15:54:55 -0400</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/quicksort/</guid>
      <description>The Quicksort algorithm was created by Tony Hoare in 1961 and it is a very powerful algorithm to sort an array in memory until today. Here, I will describe the Quicksort algorithm, show an implementation in Python, and analyze the time complexity of this algorithm in the worst and best scenarios.&#xA;The idea behind the Quicksort is so simple: to sort an array \(V\) of \(n\) elements, it is easier to sort smaller sub-arrays of \(V\).</description>
    </item>
    <item>
      <title>Designing Data-Intensive Applications: Review</title>
      <link>https://joaojunior.org/posts/designing-data-intensive-applications-review/</link>
      <pubDate>Tue, 20 Jul 2021 10:02:04 -0400</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/designing-data-intensive-applications-review/</guid>
      <description>Disclaimer: Don&amp;rsquo;t read this review, go ahead and read the book, it will be much better for you. The only reason that I wrote this is for my future reference.&#xA;First of all, I love to read books and I do not believe that a review should influence someone to read or not a book. However, as a researcher, one of the most important things that I learned during my years at the university was the importance to write a review of papers.</description>
    </item>
    <item>
      <title>Chrome with selenium, python and docker</title>
      <link>https://joaojunior.org/posts/my-first-post/</link>
      <pubDate>Mon, 16 Sep 2019 09:15:55 -0400</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/my-first-post/</guid>
      <description>Sometimes, when I execute the Chrome inside a docker container I receive the error below:&#xA;selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: crashed&#xA;It is caused because Chrome uses the /dev/shm to share memory and the docker, by default, set 64MB for this partition.&#xA;Here, I will describe how to reproduce this error and how to resolve it.&#xA;How to reproduce To reproduce this error, we need to create a docker image with chrome and python.</description>
    </item>
    <item>
      <title>Identifying Paragraphs</title>
      <link>https://joaojunior.org/posts/identify-paragraphs/</link>
      <pubDate>Wed, 29 Mar 2017 17:00:19 -0500</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/identify-paragraphs/</guid>
      <description>I&amp;rsquo;m learning computer vision and I&amp;rsquo;m using the Opencv and Python to write algorithms in this field of computer science. This field is very interesting because it involves computer science and math and also, it is necessary to have good ideas to solve problems.&#xA;Here, I will show my first algorithm in computer vision. It is to identifies paragraphs in a text image. It consider that the image have a white background and that the characters have a black color.</description>
    </item>
    <item>
      <title>Resources in Operational Research</title>
      <link>https://joaojunior.org/posts/my-second-post/</link>
      <pubDate>Sun, 26 Feb 2017 09:42:04 -0400</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/my-second-post/</guid>
      <description>I wrote a list of operational research resource which contains many name of books, events, groups, solvers and teachers. I publish this list here. It is a github&amp;rsquo;s repository and you can help to update :-)&#xA;I wrote it based on the list, wrote by Avelino, about resources for go programming language.</description>
    </item>
    <item>
      <title>Callbacks in Cplex</title>
      <link>https://joaojunior.org/posts/callbacks-in-cplex/</link>
      <pubDate>Sun, 08 Jan 2017 16:48:25 -0500</pubDate><author>blog@joaojunior.org (Joao Junior)</author>
      <guid>https://joaojunior.org/posts/callbacks-in-cplex/</guid>
      <description>Callbacks in Cplex I used LazyConstraintCallback to implement a Branch and Cut algorithm with CPLEX, but when I implemented and run this algorithm, it was very slow if I compare it with its version that doesn&amp;rsquo;t use callbacks in Cplex. The reason is because ControlCallback(LazyConstraintCallback is a ControlCallback) switch Cplex to sequential mode by default and turn off dynamic search. I wrote this post, because I didn&amp;rsquo;t find this information in Cplex’s documentation, I only found it in this technical forum.</description>
    </item>
  </channel>
</rss>
